package kr.or.ddit.univBoard.service;

import java.io.File;
import java.util.List;
import java.util.Optional;

import javax.inject.Inject;

import org.springframework.beans.factory.annotation.Value;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.stereotype.Service;

import kr.or.ddit.attatch.service.AttatchFileGroupService;
import kr.or.ddit.attatch.vo.AttatchFileGroupVO;
import kr.or.ddit.attatch.vo.AttatchFileVO;
import kr.or.ddit.univBoard.BoardException;
import kr.or.ddit.univBoard.dao.UnivBoardDAO;
import kr.or.ddit.univBoard.vo.UnivBoardVO;
import kr.or.ddit.vo.Pagination;
import lombok.extern.slf4j.Slf4j;
@Slf4j
@Service
public class UnivBoardServiceImpl implements UnivBoardService {
	
	@Inject
	private UnivBoardDAO univBoardDAO;
	
	@Inject
	private AttatchFileGroupService fileService;
	
	@Value("#{appInfo['contracts']}")
	private File saveFolder;
	
	@Inject
	private PasswordEncoder encoder;
	
	@Override
	public void createUnivBoard(UnivBoardVO univboard) {
		Authentication authentication = SecurityContextHolder.getContext().getAuthentication();
		log.info("현재 로그인된 사용자 : {}", authentication);
		AttatchFileGroupVO atchFileGroup = univboard.getAtchFileGroup();
		Optional.ofNullable(atchFileGroup)
				.ifPresent((afg)->{
					fileService.createAttatchFileGroup(afg, saveFolder);
					univboard.setUbAtch(afg.getAtchId());
				});
		univBoardDAO.insertUnivBoard(univboard);
	}

		
		

	@Override
	public void retrievBoardList(Pagination<UnivBoardVO> pagination) {
		int totalRecord = univBoardDAO.selectTotalRecord(pagination);
		pagination.setTotalRecord(totalRecord);
		List<UnivBoardVO> dataList = univBoardDAO.selectUnivBoardList(pagination);
		pagination.setDataList(dataList);
	}

	@Override
	public UnivBoardVO retrieveBoard(int ubNo) {
		UnivBoardVO univboard = univBoardDAO.selectBoard(ubNo);
		if(univboard == null) throw new BoardException(ubNo);
		univBoardDAO.updateubCnt(ubNo);
		return univboard;
	}

	@Override
	public void modifyUnivBoard(UnivBoardVO univboard) {
		
	}

	@Override
	public void removeUnivBoard(UnivBoardVO condition) {
		UnivBoardVO saved = retrieveBoard(condition.getUbNo());
		
		int rowcnt = univBoardDAO.deleteBoard(condition);
		if(rowcnt>0) {
			Optional.ofNullable(saved.getUbAtch())
					.ifPresent((ubAtch)->{
						fileService.removeAttatchFileGroup(ubAtch, saveFolder);
					});
		}
	}

	@Override
	public AttatchFileVO download(AttatchFileVO condition) {
		AttatchFileVO atchFile = fileService.retrieveAttatchFile(condition, saveFolder);
		if(atchFile== null)
			throw new RuntimeException(String.format("%d,%d 번 파일이 없음.",condition.getAtchId(),condition.getAtchSeq()));
		return atchFile;
	}

}
